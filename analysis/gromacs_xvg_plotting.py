"""
Author: Tennisatw
Date: 2024/03/25
Description:

将gromacs产生的xvg文件绘制成png图片。
Plot the xvg file generated by gromacs as a png image.

gromacs会用到一些grace的plotting命令, 参考https://plasma-gate.weizmann.ac.il/Grace/doc/UsersGuide.html
Gromacs will use some grace plotting commands, refer to https://plasma-gate.weizmann.ac.il/Grace/doc/UsersGuide.html
"""

# xvg文件地址 - xvg File address
file_address = r"xxx.xvg"

# 需要绘制的曲线 - Lines to be plotted
# 如需绘制第1，3，5条曲线，填入[1, 3, 5] - If you want to plot the 1st, 3rd, and 5th lines, fill in [1, 3, 5]
# 留空 [] 则绘制所有曲线 - Leave blank [] to plot all lines 
plotting_lines = []

# x轴范围 - x-axis range
# 如需绘制0到100的x轴，填入[0, 100] - If you want to plot the x-axis from 0 to 100, fill in [0, 100]
# 留空则自动调整 - Leave blank for automatic adjustment
x_lim = []  

# y轴范围 - y-axis range
# 如需绘制0到100的y轴，填入[0, 100] - If you want to plot the y-axis from 0 to 100, fill in [0, 100]
# 留空则自动调整 - Leave blank for automatic adjustment
y_lim = []


# -------------------以下内容不需要修改 Below this line, no need to modify-------------------

import matplotlib.pyplot as plt
        
x = []
y = []
settings = {'title': '', 'xaxis': '', 'yaxis': '', 'legend': False}
legends = []

with open(file_address, 'r') as file:
    lines = file.readlines()
    for line in lines:
        if line.startswith('#'):
            pass
        elif line.startswith('@'):
            param = line.split()
            try:
                if param[1] == 'title':
                    settings['title'] = line.split('"')[-2]
                elif param[1] == 'xaxis':
                    settings['xaxis'] = line.split('"')[-2]
                elif param[1] == 'yaxis':
                    settings['yaxis'] = line.split('"')[-2]
                elif param[1] == 'TYPE':
                    if param[2] == 'xy':
                        pass
                    else:
                        print('This script only supports xy type xvg file')
                        exit()
                elif param[1] == 'subtitle':
                    settings['title'] += '\n' + line.split('"')[-2]
                elif param[1] == 'legend':
                    if param[2] == 'on':
                        settings['legend'] = True
                elif param[2] == 'legend':
                    legends.append(line.split('"')[-2])
            except IndexError:
                pass

        else:
            try:
                data = line.strip().split()
                x.append(float(data[0]))
                
                data_len = len(data) - 1
                for i in range(data_len):
                    try:
                        y[i].append(float(data[i+1]))
                    except IndexError:
                        y.append([float(data[i+1])])
            except (IndexError, ValueError):
                pass
        
legends_new = []    
for legend in legends:
    legends_new.append(legend.replace('\\s', '$_{').replace('\\v{}\\z{}', '}$'))       

if plotting_lines == []:
    for i in range(len(y)):
        if settings['legend']:
            try:
                plt.plot(x, y[i], label=legends_new[i])
            except IndexError:
                plt.plot(x, y[i])
        else:
            plt.plot(x, y[i])
else:
    for i in plotting_lines:
        if settings['legend']:
            try:
                plt.plot(x, y[i-1], label=legends_new[i-1])
            except IndexError:
                plt.plot(x, y[i-1])
        else:
            plt.plot(x, y[i-1])
            
if x_lim != []:
    plt.xlim(x_lim)
    
if y_lim != []:
    plt.ylim(y_lim)
            
plt.title(settings['title'])
plt.xlabel(settings['xaxis'])
plt.ylabel(settings['yaxis'])
plt.legend()

plt.savefig(file_address.replace('.xvg', '.png'))
plt.show()